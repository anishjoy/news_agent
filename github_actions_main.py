"""Production-ready main script for GitHub Actions deployment."""

import os
import sys
import yaml
import time
from typing import List, Dict, Any
from agents import Agent, Runner, function_tool
from utils.logger import setup_logger

# Load environment variables from .env file if it exists
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

logger = setup_logger(__name__)

# Global state for passing data between agents
_collected_articles = {}
_unique_articles = {}
_storage_results = {}

# News Collection Agent Tools
@function_tool
def collect_news_for_company(company: str) -> str:
    """Collect news for a specific company using direct API calls."""
    try:
        from news_agents.news_collector import NewsCollectorAgent
        collector = NewsCollectorAgent()
        
        # Use the working method that collects real articles
        articles = collector.collect_news_for_company(company)
        
        # Store in global state
        _collected_articles[company] = articles
        
        logger.info(f"Collected {len(articles)} articles for {company}")
        return f"Successfully collected {len(articles)} articles for {company}"
        
    except Exception as e:
        logger.error(f"Error collecting news for {company}: {e}")
        return f"Error collecting news for {company}: {e}"

# Deduplication Agent Tools
@function_tool
def deduplicate_articles_for_company(company: str) -> str:
    """Deduplicate articles for a specific company."""
    try:
        from news_agents.deduplicator import DeduplicatorAgent
        
        if company not in _collected_articles:
            return f"No collected news found for {company}"
        
        deduplicator = DeduplicatorAgent()
        articles = _collected_articles[company]
        unique_articles = deduplicator.deduplicate_articles(articles, company)
        
        # Store in global state
        _unique_articles[company] = unique_articles
        
        logger.info(f"Deduplicated {len(articles)} articles to {len(unique_articles)} unique articles for {company}")
        return f"Successfully deduplicated articles for {company}: {len(unique_articles)} unique articles"
        
    except Exception as e:
        logger.error(f"Error deduplicating articles for {company}: {e}")
        return f"Error deduplicating articles for {company}: {e}"

# Storage Agent Tools
@function_tool
def store_articles_for_company(company: str) -> str:
    """Store articles for a specific company."""
    try:
        from news_agents.storage import StorageAgent
        
        if company not in _unique_articles:
            return f"No deduplicated news found for {company}"
        
        storage = StorageAgent()
        articles = _unique_articles[company]
        result = storage.store_articles(articles, company)
        
        # Store in global state
        _storage_results[company] = result
        
        logger.info(f"Stored {result['stored_count']} articles for {company}")
        return f"Successfully stored {result['stored_count']} articles for {company}"
        
    except Exception as e:
        logger.error(f"Error storing articles for {company}: {e}")
        return f"Error storing articles for {company}: {e}"

# Email Agent Tools
@function_tool
def create_email_subject(companies: str) -> str:
    """Create email subject line based on articles and companies."""
    # Count total articles from all companies
    total_articles = 0
    for company, articles in _unique_articles.items():
        total_articles += len(articles)
    
    if total_articles > 0:
        subject = f"üì∞ {total_articles} News Updates - {companies}"
    else:
        subject = "üì∞ No new articles found"
    return f"Email subject: {subject}"

@function_tool
def format_email_content_with_articles(companies: str) -> str:
    """Format articles into HTML email content with actual article details."""
    try:
        # Collect all articles from all companies
        all_articles = []
        for company, articles in _unique_articles.items():
            all_articles.extend(articles)
        
        if not all_articles:
            return """<html><body><h2>üì∞ Daily News Summary</h2><p>No new articles found for the monitored companies today.</p><hr><p><em>Generated by News Agent System</em></p></body></html>"""
        
        # Sort articles by relevance score (highest first)
        all_articles.sort(key=lambda x: x.get('relevance_score', 0), reverse=True)
        
        # Create HTML content with actual articles
        html_content = f"""<html><body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;"><h2>üì∞ Daily News Summary</h2><p>Here are the latest news updates for {companies}:</p><p><strong>Total Articles:</strong> {len(all_articles)}</p><hr>"""
        
        # Group articles by company
        company_articles = {}
        for article in all_articles:
            company = article.get('company', 'Unknown')
            if company not in company_articles:
                company_articles[company] = []
            company_articles[company].append(article)
        
        # Add articles by company
        for company, articles in company_articles.items():
            html_content += f"""<h3>üè¢ {company} ({len(articles)} articles)</h3><ul>"""
            
            for article in articles[:5]:  # Limit to top 5 per company
                title = article.get('title', 'No title')
                url = article.get('url', '#')
                snippet = article.get('snippet', 'No description available')
                relevance_score = article.get('relevance_score', 0)
                published_date = article.get('published_date', 'Unknown date')
                
                # Clean and truncate snippet
                snippet = str(snippet).strip()
                if len(snippet) > 200:
                    snippet = snippet[:200] + "..."
                
                # Clean title and URL
                title = str(title).strip()
                url = str(url).strip()
                
                # Format published date
                if published_date and published_date != 'Unknown date':
                    try:
                        from datetime import datetime
                        if isinstance(published_date, str):
                            # Try to parse the date
                            published_date = published_date[:10]  # Just take the date part
                    except:
                        published_date = 'Recent'
                else:
                    published_date = 'Recent'
                
                html_content += f"""<li style="margin-bottom: 15px;"><strong><a href="{url}" style="color: #0066cc; text-decoration: none;">{title}</a></strong><br><small style="color: #666;">{published_date} | Relevance: {relevance_score:.1f}</small><br><span style="color: #555;">{snippet}</span></li>"""
            
            html_content += """</ul><hr>"""
        
        html_content += """<p><em>Generated by News Agent System - AI-powered news monitoring</em></p></body></html>"""
        
        return html_content
        
    except Exception as e:
        logger.error(f"Error formatting email content: {e}")
        return f"<html><body><p>Error formatting email content: {e}</p></body></html>"

@function_tool
def send_email_via_smtp(subject: str, html_content: str, recipient: str) -> str:
    """Send email via Gmail SMTP."""
    try:
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        
        # Gmail SMTP configuration
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        sender_email = os.getenv("GMAIL_SENDER")
        sender_password = os.getenv("GMAIL_APP_PASSWORD")
        
        if not sender_email or not sender_password:
            return "Error: Gmail credentials not configured"
        
        # Create message
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = recipient
        msg['Subject'] = subject
        
        # Add HTML content
        msg.attach(MIMEText(html_content, 'html'))
        
        # Send email
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(msg)
        
        logger.info(f"Email sent successfully to {recipient}")
        return f"Email sent successfully to {recipient}"
        
    except Exception as e:
        logger.error(f"Error sending email: {e}")
        return f"Error sending email: {e}"

class ProductionNewsAgentSystem:
    def __init__(self, config_path='config.yaml'):
        """Initialize the production news agent system."""
        self.config_path = config_path
        self.load_config()
        
        # Create specialized agents
        self.news_collector = self.create_news_collector_agent()
        self.deduplicator = self.create_deduplicator_agent()
        self.storage_agent = self.create_storage_agent()
        self.email_agent = self.create_email_agent()
    
    def load_config(self):
        """Load configuration from YAML file."""
        try:
            with open(self.config_path, 'r') as f:
                self.config = yaml.safe_load(f)
            self.companies = [company['name'] for company in self.config.get('companies', [])]
            logger.info(f"Loaded configuration for {len(self.companies)} companies")
        except Exception as e:
            logger.error(f"Error loading configuration: {e}")
            self.companies = []
            self.config = {}
    
    def create_news_collector_agent(self) -> Agent:
        """Create the news collection agent."""
        return Agent(
            name="News Collector",
            instructions="""
            You are a news collection agent specialized in gathering information about companies.
            Your primary focus is on:
            1. Stock price changes and financial news (look for percentage movements ‚â•5%)
            2. Leadership changes and executive appointments
            3. AI-related developments and announcements
            4. Major business partnerships and acquisitions

            For each company, use the available tools to:
            1. Collect news using NewsAPI and Google News
            2. Filter for relevance and high-impact news
            3. Return summary of collected articles

            Prioritize articles that mention AI, stock prices, or leadership changes.
            """,
            tools=[
                collect_news_for_company
            ]
        )
    
    def create_deduplicator_agent(self) -> Agent:
        """Create the deduplication agent."""
        return Agent(
            name="Deduplicator",
            instructions="""
            You are a news deduplication agent. Your task is to compare newly collected articles
            with previously stored articles in Pinecone to identify and filter out redundant information.
            
            Use the provided tools to:
            1. Deduplicate articles for each company
            2. Compare against existing articles in Pinecone
            3. Filter out duplicates and return only unique articles
            
            Use a similarity threshold of 0.85 for duplicate detection.
            """,
            tools=[
                deduplicate_articles_for_company
            ]
        )
    
    def create_storage_agent(self) -> Agent:
        """Create the storage agent."""
        return Agent(
            name="Storage Agent",
            instructions="""
            You are a news storage agent. Your role is to store unique news articles
            into the Pinecone vector database. Ensure that each article is properly
            embedded and indexed for future deduplication and retrieval.
            
            Use the provided tools to:
            1. Store articles for each company in Pinecone
            2. Track success/failure rates
            3. Organize articles by company and metadata
            """,
            tools=[
                store_articles_for_company
            ]
        )
    
    def create_email_agent(self) -> Agent:
        """Create the email agent."""
        return Agent(
            name="Email Agent",
            instructions="""
            You are an email sending agent. Your task is to format and send a consolidated
            news summary to the user via Gmail SMTP. Ensure the email is well-formatted
            and contains all relevant news articles with actual article details.
            
            Use the provided tools in this order:
            1. First, create the email subject line using create_email_subject
            2. Then, format the articles into HTML email content using format_email_content_with_articles
            3. Finally, send the email using send_email_via_smtp with the subject, HTML content, and recipient
            
            When sending emails, use the recipient email address provided in the input.
            Default recipient is anishjoy@gmail.com if not specified.
            """,
            tools=[
                create_email_subject,
                format_email_content_with_articles,
                send_email_via_smtp
            ]
        )
    
    def run_full_pipeline(self):
        """Run the complete news monitoring pipeline using Runner with agent handoffs."""
        try:
            logger.info("üöÄ Starting Production News Agent System with OpenAI Agents SDK")
            start_time = time.time()
            
            all_results = {}
            
            # Process each company through the full agent pipeline
            for company in self.companies:
                logger.info(f"üîÑ Processing {company} through agent pipeline")
                
                try:
                    # Step 1: News Collection Agent
                    logger.info(f"üì∞ Step 1: Collecting news for {company}")
                    collection_input = f"""
                    Collect recent news for {company}. Focus on:
                    - AI-related developments
                    - Stock price movements (‚â•5%)
                    - Leadership changes
                    - Major business news
                    
                    Use NewsAPI and Google News RSS feeds.
                    Calculate relevance scores and filter for high-impact news.
                    """
                    
                    collection_result = Runner.run_sync(self.news_collector, collection_input)
                    logger.info(f"‚úÖ News collection completed for {company}")
                    
                    # Step 2: Deduplication Agent
                    logger.info(f"üîç Step 2: Deduplicating articles for {company}")
                    dedup_input = f"""
                    Deduplicate articles for {company}.
                    Compare against existing articles in Pinecone.
                    Remove duplicates using semantic similarity.
                    Return only unique, high-value articles.
                    """
                    
                    dedup_result = Runner.run_sync(self.deduplicator, dedup_input)
                    logger.info(f"‚úÖ Deduplication completed for {company}")
                    
                    # Step 3: Storage Agent
                    logger.info(f"üíæ Step 3: Storing articles for {company}")
                    storage_input = f"""
                    Store unique articles for {company} in Pinecone.
                    Ensure proper metadata and organization.
                    Track success/failure rates.
                    """
                    
                    storage_result = Runner.run_sync(self.storage_agent, storage_input)
                    logger.info(f"‚úÖ Storage completed for {company}")
                    
                    all_results[company] = {
                        'collection': collection_result,
                        'deduplication': dedup_result,
                        'storage': storage_result
                    }
                    
                except Exception as e:
                    logger.error(f"‚ùå Error processing {company}: {e}")
                    all_results[company] = {'error': str(e)}
            
            # Step 4: Email Agent (for all companies)
            logger.info("üìß Step 4: Sending consolidated email summary")
            recipient_email = self.config.get('email', {}).get('recipient', 'anishjoy@gmail.com')
            email_input = f"""
            Send a consolidated news summary for companies: {', '.join(self.companies)}.
            Recipient email: {recipient_email}
            Create a compelling subject line and format the content professionally.
            Focus on high-impact news and AI-related content.
            """
            
            email_result = Runner.run_sync(self.email_agent, email_input)
            logger.info("‚úÖ Email summary sent")
            
            execution_time = time.time() - start_time
            
            logger.info(f"üéâ Pipeline completed successfully in {execution_time:.2f} seconds")
            
            return {
                'success': True,
                'execution_time': execution_time,
                'results': all_results,
                'email_result': email_result
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error in pipeline execution: {e}")
            return {
                'success': False,
                'error': str(e),
                'execution_time': 0
            }

def main():
    """Main entry point for GitHub Actions."""
    try:
        # Check environment variables
        required_env_vars = [
            'OPENAI_API_KEY',
            'PINECONE_API_KEY', 
            'NEWS_API_KEY',
            'GMAIL_SENDER',
            'GMAIL_APP_PASSWORD'
        ]
        
        missing_vars = [var for var in required_env_vars if not os.getenv(var)]
        if missing_vars:
            logger.error(f"‚ùå Missing required environment variables: {missing_vars}")
            return 1
        
        logger.info("‚úÖ All environment variables present")
        
        # Initialize system
        system = ProductionNewsAgentSystem()
        
        # Run the pipeline
        results = system.run_full_pipeline()
        
        if results['success']:
            logger.info("üéâ Production News Agent System completed successfully")
            logger.info(f"‚è±Ô∏è Execution time: {results['execution_time']:.2f} seconds")
            
            # Print detailed results
            for company, result in results['results'].items():
                if 'error' in result:
                    logger.error(f"‚ùå {company}: {result['error']}")
                else:
                    logger.info(f"‚úÖ {company}: Processed through all agents")
            
            return 0
        else:
            logger.error(f"‚ùå Production News Agent System failed: {results.get('error', 'Unknown error')}")
            return 1
            
    except Exception as e:
        logger.error(f"‚ùå Fatal error in main: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
